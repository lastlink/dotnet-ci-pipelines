# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

pr:
  autoCancel: true
  branches:
    include:
      - master

trigger:
  branches:
    include:
    - releases/*
    exclude:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  DOCKER_DRIVER: overlay
  CONTAINER_IMAGE: codeclimate/codeclimate
  CONTAINER_TAG: '0.85.2'
  RESHARPER_CLI_NAME: 'JetBrains.ReSharper.CommandLineTools.Unix'
  RESHARPER_CLI_VERSION: "2019.2.3"
  # set RESHARPER_CLI_VERSION=2019.2.3

resources:
  containers:
  - container: mysql
    image: mysql:5.7.29
    ports: 
      - 3306:3306
    options: -e MYSQL_ROOT_PASSWORD=mysecretpw

  - container: postgres_server
    image: postgres:latest
    ports: 
      - 5432:5432
    options: -e POSTGRES_PASSWORD=mysecretpassword

  - container: mssql
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports: 
      # - 1433
      - 1433:1433
    env:
      ACCEPT_EULA: Y
      SA_PASSWORD: yourStrong(!)Password
      MSSQL_PID: Express
    options: --name mssql

jobs:
- job: test
  steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 9.0'
      inputs:
        packageType: sdk
        version: 9.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore (solution)'
      inputs:
        command: 'restore'
        projects: '$(solution)'
    - task: CmdLine@2
      displayName: 'enablesqlite'
      inputs:
        script: |
          cp ./MyProject.Repository.Test/Data/appSettings.gitlab.json ./MyProject.Repository.Test/Data/AppSettings.json
    - task: DotNetCoreCLI@2
      displayName: 'test'
      inputs:
        command: 'test'
        publishTestResults: true
        arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect:"XPlat Code Coverage" /p:CoverletOutput="./TestResults/"'
    - task: CmdLine@2
      displayName: 'Merge Coverage'
      inputs:
        script: |
          dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
          .\tools\reportgenerator "-reports:**\TestResults\coverage.cobertura.xml;" "-targetdir:coverlet" -reporttypes:Cobertura
    # - task: PublishCodeCoverageResults@1
    #   inputs:
    #     codeCoverageTool: 'Cobertura'
    #     summaryFileLocation: 'coverlet\Cobertura.xml'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'  # or 'JaCoCo', 'CodeCoverage'
        summaryFileLocation: 'coverlet/Cobertura.xml'
        reportDirectory: 'coverlet'
        failIfCoverageEmpty: true

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

- job: unit_test_db_mssql_verify
  services:
    mssql: mssql
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: echo Hello, world!
    displayName: 'Run a one-line script'


  - task: CmdLine@2
    displayName: 'pip'
    inputs:
      script: 'pip install pyodbc'
      workingDirectory: '$(build.sourcesdirectory)'
  - task: PowerShell@2
    displayName: 'delay 10'
    inputs:
      targetType: 'inline'
      script: |
        # Write your PowerShell commands here.
        
        start-sleep -s 10
  - task: CmdLine@2
    displayName: 'docker logs'
    inputs:
      script: 'docker logs mssql'
  # - task: CmdLine@2
  #   displayName: 'Run sqlcmd in container'
  #   inputs:
  #     script: |
  #       docker run --rm mcr.microsoft.com/mssql-tools \
  #         sqlcmd -S localhost -d master -U sa -P "yourStrong(!)Password" -Q "SELECT @@VERSION;"

  # - task: Bash@3
  #   displayName: 'Install sqlcmd on Ubuntu 24.04'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       sudo apt update
  #       sudo ACCEPT_EULA=Y apt install -y mssql-tools
  #       echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
  #       source ~/.bashrc

  - task: CmdLine@2
    displayName: 'Install sqlcmd'
    inputs:
      script: |
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
        sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" > /etc/apt/sources.list.d/mssql-release.list'
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc

  # - task: CmdLine@2
  #   displayName: 'npm install'
  #   inputs:
  #     script: 'npm install mssql'
  #     workingDirectory: '$(build.sourcesdirectory)'
  - task: CmdLine@2
    displayName: 'docker list'
    inputs:
      script: 'docker ps -all'
  - task: CmdLine@2
    displayName: 'Run sqlcmd'
    inputs:
      script: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -d master -U sa -P "yourStrong(!)Password" -Q "SELECT @@VERSION;"
  # - task: CmdLine@2
  #   displayName: 'sqlcmd'
  #   inputs:
  #     script: 'sqlcmd -S localhost -d master -U sa -P "yourStrong(!)Password" -Q "SELECT @@version;"'

- job: unit_test_db_mssql
  # condition: eq('${{ variables.runDbTests }}', 'true')
  # continueOnError: true
  pool:
    vmImage: 'ubuntu-latest'
  services:
    localhostsqlserver: mssql

  steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 9.0'
      inputs:
        packageType: sdk
        version: 9.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore (solution)'
      inputs:
        command: 'restore'
        projects: '$(solution)'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'env | sort'

        #  echo Write your commands here...
        #   echo ${{agent.services.localhostsqlserver.ports.1433}}
        #   echo Write your commands here end...
    - task: PowerShell@2
      displayName: 'delay 10'
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          start-sleep -s 10
    - task: CmdLine@2
      displayName: 'docker logs'
      inputs:
        script: 'docker logs mssql'
    - task: CmdLine@2
      displayName: 'enabledb'
      inputs:
        script: |
          cp ./MyProject.Repository.Test/Data/appSettings.devops.mssql.json ./MyProject.Repository.Test/Data/AppSettings.json
    - task: DotNetCoreCLI@2
      displayName: 'database tests'
      inputs:
        command: 'test'
        workingDirectory: MyProject.Repository.Test
        arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="./TestResults/"'

- job: unit_test_db_postgres
  # condition: eq('${{ variables.runDbTests }}', 'true')
  pool:
    vmImage: 'ubuntu-latest'
  services:
    localhost_postgres: postgres_server
  steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 9.0'
      inputs:
        packageType: sdk
        version: 9.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore (solution)'
      inputs:
        command: 'restore'
        projects: '$(solution)'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'env | sort'

      # echo Write your commands here...
      # echo ${{agent.services.localhost_postgres.ports.5432}}
      # echo Write your commands here end...
    - task: CmdLine@2
      displayName: 'enabledb'
      inputs:
        script: |
          cp ./MyProject.Repository.Test/Data/appSettings.devops.postgres.json ./MyProject.Repository.Test/Data/AppSettings.json
    - task: DotNetCoreCLI@2
      displayName: 'database tests'
      inputs:
        command: 'test'
        workingDirectory: MyProject.Repository.Test
        arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="./TestResults/"'

- job: unit_test_db_mysql
  # condition: eq('${{ variables.runDbTests }}', 'true')
  pool:
    vmImage: 'ubuntu-latest'
  services:
    localhost_mysql: mysql
  steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 9.0'
      inputs:
        packageType: sdk
        version: 9.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore (solution)'
      inputs:
        command: 'restore'
        projects: '$(solution)'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'env | sort'

      #   echo Write your commands here...
      # echo ${{agent.services.localhost_mysql.ports.3306}}
      # echo Write your commands here end...
    - task: CmdLine@2
      displayName: 'enabledb'
      inputs:
        script: |
          cp ./MyProject.Repository.Test/Data/appSettings.devops.mysql.json ./MyProject.Repository.Test/Data/AppSettings.json
    - task: DotNetCoreCLI@2
      displayName: 'database tests'
      inputs:
        command: 'test'
        workingDirectory: MyProject.Repository.Test
        arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="./TestResults/"'